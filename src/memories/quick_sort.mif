WIDTH=16;
DEPTH=4096;
ADDRESS_RADIX=UNS;
DATA_RADIX=BIN;
CONTENT BEGIN
	[0..4095] : 0;

-- $0 stack count :0
-- left 0..15 :1
-- right 16..31 :2
	0:	1000000000000000; -- li 0 0
	1:	1000001000000100; -- li 2 4
	2:	1100001010001000; -- sll 2 8
	3:	1000101000000001; -- addi 2 1
-- $2 = 1025 :7
	4:	0100001000000000; -- st 2 0 0
--
	5:	1000001000001000; -- li 2 8
	6:	1100001010001000; -- sll 2 8
--addi 2 9 :12
	7:	1000101011111111; -- addi 2 -1
	8:	0100001010000000; -- st 2 128 0
--
	9:	1000000000000001; -- li 0 1
--
--:partition
--
	10:	1000011100000000; -- li 7 0
	11:	1111100001010000; -- cmp 0 7
	12:	1011100000110001; -- be :end
--
	13:	1000100011111111; -- addi 0 -1
-- $1: left, $2: right :25
	14:	0000000100000000; -- ld 1 0 0
	15:	0000001010000000; -- ld 2 128 0
--
-- if left >= right :29
	16:	1100101001010000; -- cmp 2 1
	17:	1011101011111000; -- ble :partition
--
-- $3 pivot value: $r3 = a[left] :33
	18:	1101010001100000; -- mov 4 2
	19:	1100110000010000; -- sub 4 1
	20:	1100010010100001; -- srl 4 1
	21:	1100110000000000; -- add 4 1
	22:	0010001100000000; -- ld 3 0 4
	23:	0000110100000000; -- ld 5 0 1
	24:	0100101100000000; -- st 3 0 1
	25:	0110010100000000; -- st 5 0 4
--
--
-- $4 left value: $r4 = left + 1 :44
-- $5 right value: $r5 = right :45
	26:	1100110001100000; -- mov 4 1
	27:	1101010101100000; -- mov 5 2
	28:	1000110000000001; -- addi 4 1
--
-- $r6 = a[left + 1] :50
-- $r4: i :51
--:find_left
	29:	0010011000000000; -- ld 6 0 4
	30:	1110000011101111; -- nop
-- if a[i] > pivot :55
	31:	1111001101010000; -- cmp 3 6
	32:	1011100100000100; -- blt :find_right
-- if i > right :58
	33:	1110001001010000; -- cmp 2 4
	34:	1011100100000010; -- blt :find_right
	35:	1000110000000001; -- addi 4 1
	36:	1010000011111000; -- b 0 :find_left
--
--:find_right
	37:	0010111100000000; -- ld 7 0 5
	38:	1110000011101111; -- nop
-- if a[j] < pivot :67
	39:	1101111101010000; -- cmp 7 3
	40:	1011100100000100; -- blt :swap
-- if j < left :70
	41:	1100110101010000; -- cmp 5 1
	42:	1011100000000010; -- be :swap
	43:	1000110111111111; -- addi 5 -1
	44:	1010000011111000; -- b 0 :find_right
--
--:swap
-- swap a[$r4] with a[$r5] :77
-- $r5: j :78
	45:	1110010101010000; -- cmp 5 4
	46:	1011101000000101; -- ble :end_partition
	47:	0110111000000000; -- st 6 0 5
	48:	0110011100000000; -- st 7 0 4
	49:	1000110000000001; -- addi 4 1
	50:	1000110111111111; -- addi 5 -1
	51:	1010000011101001; -- b 0 :find_left
--
--:end_partition
--
	52:	0100111100000000; -- st 7 0 1
	53:	0110101100000000; -- st 3 0 5
--
-- recursion :92
--
	54:	1000110111111111; -- addi 5 -1
	55:	0100000100000000; -- st 1 0 0
	56:	0100010110000000; -- st 5 128 0
	57:	1000100000000001; -- addi 0 1
--
	58:	0100010000000000; -- st 4 0 0
	59:	0100001010000000; -- st 2 128 0
	60:	1000100000000001; -- addi 0 1
--
	61:	1010000011001100; -- b 0 :partition
--
--:end
--
-- output :107
	62:	1000001000000100; -- li 2 4
	63:	1100001010001000; -- sll 2 8
--
	64:	1000101000000001; -- addi 2 1
	65:	0001011000000000; -- ld 6 0 2
	66:	1000101000000001; -- addi 2 1
	67:	0001011100000000; -- ld 7 0 2
	68:	1111011111010000; -- out 6 7 0
--
	69:	1000101000000001; -- addi 2 1
	70:	0001011000000000; -- ld 6 0 2
	71:	1000101000000001; -- addi 2 1
	72:	0001011100000000; -- ld 7 0 2
	73:	1111011111010001; -- out 6 7 1
--
	74:	1000101000000001; -- addi 2 1
	75:	0001011000000000; -- ld 6 0 2
	76:	1000101000000001; -- addi 2 1
	77:	0001011100000000; -- ld 7 0 2
	78:	1111011111010010; -- out 6 7 2
--
	79:	1000101000000001; -- addi 2 1
	80:	0001011000000000; -- ld 6 0 2
	81:	1000101000000001; -- addi 2 1
	82:	0001011100000000; -- ld 7 0 2
	83:	1111011111010011; -- out 6 7 3
--
--b 0 :printing :135
--
	84:	1110000011101111; -- nop
	85:	1100000011110000; -- hlt
END;
