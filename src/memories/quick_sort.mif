WIDTH=16;
DEPTH=4096;
ADDRESS_RADIX=UNS;
DATA_RADIX=BIN;
CONTENT BEGIN
	[0..4095] : 0;

-- $0 stack count :0
-- left 0..15 :1
-- right 16..31 :2
	0:	1000000000000000; -- li 0 0
	1:	1000001000000100; -- li 2 4
	2:	1100001010001000; -- sll 2 8
	3:	1000101000000010; -- addi 2 2
-- $2 = 1025 :7
	4:	0100001000000000; -- st 2 0 0
--
	5:	1000001000001000; -- li 2 8
	6:	1100001010001000; -- sll 2 8
	7:	1000101011111111; -- addi 2 -1
	8:	0100001010000000; -- st 2 128 0
--
	9:	1000000000000001; -- li 0 1
--
--:partition
--
	10:	1000011100000000; -- li 7 0
	11:	1111100001010000; -- cmp 0 7
	12:	1011100000101010; -- be :end
--
	13:	1000100011111111; -- addi 0 -1
-- $1: left, $2: right :24
	14:	0000000100000000; -- ld 1 0 0
	15:	0000001010000000; -- ld 2 128 0
-- $3 pivot value: $r3 = a[left] :27
	16:	0000101100000000; -- ld 3 0 1
--
-- if left > right :30
	17:	1100101001010000; -- cmp 2 1
	18:	1011101011110111; -- ble :partition
--
-- $4 left value: $r4 = left + 1 :34
-- $5 right value: $r5 = right :35
	19:	1100110001100000; -- mov 4 1
	20:	1101010101100000; -- mov 5 2
	21:	1000110000000001; -- addi 4 1
--
-- $r6 = a[left + 1] :40
-- $r4: i :41
--:find_left
	22:	0010011000000000; -- ld 6 0 4
	23:	1110000011101111; -- nop
-- if a[i] > pivot :45
	24:	1111001101010000; -- cmp 3 6
	25:	1011100100000100; -- blt :find_right
-- if i > right :48
	26:	1110001001010000; -- cmp 2 4
	27:	1011100100000010; -- blt :find_right
	28:	1000110000000001; -- addi 4 1
	29:	1010000011111000; -- b 0 -8
--
--:find_right
	30:	0010111100000000; -- ld 7 0 5
	31:	1110000011101111; -- nop
-- if a[j] < pivot :57
	32:	1101111101010000; -- cmp 7 3
	33:	1011100100000100; -- blt :swap
-- if j < left :60
	34:	1100110101010000; -- cmp 5 1
	35:	1011100000000010; -- be :swap
	36:	1000110111111111; -- addi 5 -1
	37:	1010000011110111; -- b 0 -9
--
--:swap
-- swap a[$r4] with a[$r5] :67
-- $r5: j :68
	38:	1110010101010000; -- cmp 5 4
	39:	1011101000000101; -- ble :end_partition
	40:	0110111000000000; -- st 6 0 5
	41:	0110011100000000; -- st 7 0 4
	42:	1000110000000001; -- addi 4 1
	43:	1000110111111111; -- addi 5 -1
	44:	1010000011101001; -- b 0 :find_left
--
--:end_partition
--
	45:	0100111100000000; -- st 7 0 1
	46:	0110101100000000; -- st 3 0 5
--
-- recursion :82
--
	47:	1000110111111111; -- addi 5 -1
	48:	0100000100000000; -- st 1 0 0
	49:	0100010110000000; -- st 5 128 0
	50:	1000100000000001; -- addi 0 1
--
	51:	0100010000000000; -- st 4 0 0
	52:	0100001010000000; -- st 2 128 0
	53:	1000100000000001; -- addi 0 1
--
	54:	1010000011010011; -- b 0 :partition
--
--:end
END;
