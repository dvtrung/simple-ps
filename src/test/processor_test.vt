`include "./helper/header.vt"
`include "../modules/processor.v"
`include "../modules/controller.v"
`include "../modules/alu_shifter.v"
`include "../modules/register.v"
`include "../devices/ram_inc.v"

module processor_test();

  reg clock, reset;
  
  wire [15:0] ir_m_data, ir_m_q;
  wire [11:0] ir_m_addr;
  wire ir_m_wren;
  
  ram_inc #("../../memories/test_addi.mif") ir_ram_inc_ (
    .data(ir_m_data), .wren(ir_m_wren), .address(ir_m_addr),
    .clock(~clock),
    .q(ir_m_q)
  );
  
  wire [15:0] main_m_data, main_m_q;
  wire [11:0] main_m_addr;
  wire main_m_wren;
  
  ram_inc #("../../memories/memory_mini_sort.mif") main_ram_inc_ (
    .data(main_m_data), .wren(main_m_wren), .address(main_m_addr),
    .clock(~clock),
    .q(main_m_q)
  );
  wire [15:0] outval1, outval2;
  wire [2:0] outsel;
  
  reg [15:0] inpval1;
  reg [15:0] inpval2;

  processor processor_ (
    .clock(clock), .reset(reset), .exec(exec),
    .ir_m_q(ir_m_q), .ir_m_data(ir_m_data),
    .ir_m_rw(ir_m_wren), .ir_m_addr(ir_m_addr),
    .main_m_q(main_m_q), .main_m_data(main_m_data),
    .main_m_rw(main_m_wren), .main_m_addr(main_m_addr),
    .inpval1(inpval1), .inpval2(inpval2),
    .outval1(outval1), .outval2(outval2), .outsel(outsel));

  wire [15:0] r0 = processor_.register_.r[0];
  wire [15:0] r1 = processor_.register_.r[1];
  wire [15:0] r2 = processor_.register_.r[2];
  wire [15:0] r3 = processor_.register_.r[3];
  wire [15:0] r4 = processor_.register_.r[4];
  wire [15:0] r5 = processor_.register_.r[5];
  wire [15:0] r6 = processor_.register_.r[6];
  wire [15:0] r7 = processor_.register_.r[7];
  
  wire [15:0] p1_IR = processor_.p1_IR;
  wire [15:0] p2_IR = processor_.p2_IR;
  wire [15:0] p3_IR = processor_.p3_IR;
  wire [15:0] p4_IR = processor_.p4_IR;
  wire [15:0] p5_IR = processor_.p5_IR;
  
  wire [15:0] p1_PC = processor_.p1_PC;
  wire [15:0] p2_PC = processor_.p2_PC;
  wire [15:0] p3_PC = processor_.p3_PC;
  wire [15:0] p4_PC = processor_.p4_PC;
  
  wire stall = processor_.jumped;
  wire stall_ = processor_.stall_;
  
  //wire p5_RegWrite = processor_.p5_RegWrite;
  //wire [2:0] write_addr = processor_.register_.write_addr;
  //wire [15:0] write_data = processor_.register_.write_data;
  
  //wire [15:0] p5_MDR = processor_.p5_MDR;
  
  //wire [15:0] p5_DR = processor_.p5_DR;
  //wire [15:0] p4_DR = processor_.p4_DR;
  
  wire [15:0] alu_res = processor_.alu_res;
  
  initial begin
    clock <= 0;
    reset <= 1;
    # 40
    reset <= 0;
    inpval1 <= 16'b0000000001011010;
    inpval2 <= 16'b0000000000001010;
    # 200000
    $finish();
  end

  always begin
    # 10
    clock <= ~clock;
  end
endmodule
