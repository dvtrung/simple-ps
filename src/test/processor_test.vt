`include "./helper/header.vt"
`include "../modules/processor.v"
`include "../modules/controller.v"
`include "../modules/alu.v"
`include "../modules/shifter.v"
`include "../modules/register.v"
`include "../devices/ram_inc.v"

module processor_test();

  reg clock, reset;
  wire m_wren;
  wire [11:0] m_addr;
  wire [15:0] m_data, m_q;
    ram_inc #("../../memories/test_output.mif") ram_inc_ (
    .data(m_data), .wren(m_wren), .address(m_addr),
    .clock(~clock),
    .q(m_q)
  );

  wire [15:0] outval1, outval2;
  wire [2:0] outsel;

  processor processor_(
    .clock(clock), .reset(reset),
    .m_q(m_q),
    .m_addr(m_addr), .m_data(m_data), //.m_rw(m_wren),
    .outval1(outval1), .outval2(outval2), .outsel(outsel)
  );

  wire [15:0] r0 = processor_.register_.r[0];
  wire [15:0] r1 = processor_.register_.r[1];
  wire [15:0] r2 = processor_.register_.r[2];
  wire [15:0] r3 = processor_.register_.r[3];
  wire [15:0] r4 = processor_.register_.r[4];
  wire [15:0] r5 = processor_.register_.r[5];
  wire [15:0] r6 = processor_.register_.r[6];
  wire [15:0] r7 = processor_.register_.r[7];
  
  wire [15:0] p1_IR = processor_.p1_IR;
  wire [15:0] p2_IR = processor_.p2_IR;
  wire [15:0] p3_IR = processor_.p3_IR;
  wire [15:0] p4_IR = processor_.p4_IR;
  wire [15:0] p5_IR = processor_.p5_IR;
  
  wire p5_RegDst = processor_.p5_RegDst;
  wire RegWrite = processor_.register_.RegWrite;
  wire [15:0] p5_DR = processor_.p5_DR;
  
  wire [2:0] write_addr = processor_.register_.write_addr;
  wire [15:0] write_data = processor_.register_.write_data;

  initial begin
    clock <= 0;
    reset <= 1;
    # 40
    reset <= 0;
    # 10000
    $finish();
  end

  always begin
    # 10
    clock <= ~clock;
  end
endmodule
